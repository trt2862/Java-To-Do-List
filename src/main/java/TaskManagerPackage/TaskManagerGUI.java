/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package TaskManagerPackage;

import java.awt.Color;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author maste
 */
public class TaskManagerGUI extends javax.swing.JFrame {

    /**
     * Creates new form TaskManagerGUI
     */
    DBManager dbm = new DBManager();
    TaskCreator tc = new TaskCreator();

    public TaskManagerGUI() {
        initComponents();
        populateJTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addTaskDialogueBox = new javax.swing.JDialog();
        addTaskTextField = new javax.swing.JTextField();
        taskTypeComboBox = new javax.swing.JComboBox<>();
        dialogAddTaskBtn = new javax.swing.JButton();
        removeAllDialogueBox = new javax.swing.JDialog();
        removeAllLabel = new javax.swing.JLabel();
        removeAllNoOption = new javax.swing.JButton();
        removeAllYesOption = new javax.swing.JButton();
        sortByDialogueBox = new javax.swing.JDialog();
        sortByComboBoxOption = new javax.swing.JComboBox<>();
        sortByJLabel = new javax.swing.JLabel();
        sortByOkButton = new javax.swing.JButton();
        sortByComboBoxSortStyle = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        AddTaskBtn = new javax.swing.JButton();
        SortByBtn = new javax.swing.JButton();
        RemoveAllTasksBtn1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();

        addTaskDialogueBox.setAutoRequestFocus(false);
        addTaskDialogueBox.setMinimumSize(new java.awt.Dimension(300, 150));

        addTaskTextField.setText("Task Name...");
        addTaskTextField.setToolTipText("Insert Task Name");
        addTaskTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                addTaskTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                addTaskTextFieldFocusLost(evt);
            }
        });

        taskTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Work", "Home" }));

        dialogAddTaskBtn.setText("Add Task");
        dialogAddTaskBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                dialogAddTaskBtnMousePressed(evt);
            }
        });

        javax.swing.GroupLayout addTaskDialogueBoxLayout = new javax.swing.GroupLayout(addTaskDialogueBox.getContentPane());
        addTaskDialogueBox.getContentPane().setLayout(addTaskDialogueBoxLayout);
        addTaskDialogueBoxLayout.setHorizontalGroup(
            addTaskDialogueBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addTaskDialogueBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addTaskDialogueBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addTaskTextField)
                    .addGroup(addTaskDialogueBoxLayout.createSequentialGroup()
                        .addComponent(taskTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 186, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addTaskDialogueBoxLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(dialogAddTaskBtn)))
                .addContainerGap())
        );
        addTaskDialogueBoxLayout.setVerticalGroup(
            addTaskDialogueBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addTaskDialogueBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addTaskTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(taskTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(dialogAddTaskBtn)
                .addContainerGap())
        );

        removeAllDialogueBox.setMinimumSize(new java.awt.Dimension(345, 110));

        removeAllLabel.setText("Are you sure you want to remove all tasks?");

        removeAllNoOption.setText("No");
        removeAllNoOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllNoOptionActionPerformed(evt);
            }
        });

        removeAllYesOption.setText("Yes");
        removeAllYesOption.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                removeAllYesOptionMousePressed(evt);
            }
        });

        javax.swing.GroupLayout removeAllDialogueBoxLayout = new javax.swing.GroupLayout(removeAllDialogueBox.getContentPane());
        removeAllDialogueBox.getContentPane().setLayout(removeAllDialogueBoxLayout);
        removeAllDialogueBoxLayout.setHorizontalGroup(
            removeAllDialogueBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, removeAllDialogueBoxLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(removeAllYesOption, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(removeAllNoOption, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(88, 88, 88))
            .addGroup(removeAllDialogueBoxLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(removeAllLabel)
                .addContainerGap(59, Short.MAX_VALUE))
        );
        removeAllDialogueBoxLayout.setVerticalGroup(
            removeAllDialogueBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(removeAllDialogueBoxLayout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addComponent(removeAllLabel)
                .addGap(18, 18, 18)
                .addGroup(removeAllDialogueBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeAllYesOption)
                    .addComponent(removeAllNoOption))
                .addContainerGap())
        );

        sortByDialogueBox.setMinimumSize(new java.awt.Dimension(250, 200));

        sortByComboBoxOption.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Task ID", "Task Name", "Complete", "Type" }));

        sortByJLabel.setText("Sort By:");

        sortByOkButton.setText("OK");
        sortByOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortByOkButtonActionPerformed(evt);
            }
        });

        sortByComboBoxSortStyle.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ascending", "Descending" }));

        javax.swing.GroupLayout sortByDialogueBoxLayout = new javax.swing.GroupLayout(sortByDialogueBox.getContentPane());
        sortByDialogueBox.getContentPane().setLayout(sortByDialogueBoxLayout);
        sortByDialogueBoxLayout.setHorizontalGroup(
            sortByDialogueBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sortByDialogueBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sortByDialogueBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sortByComboBoxSortStyle, 0, 161, Short.MAX_VALUE)
                    .addComponent(sortByJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sortByComboBoxOption, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(85, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sortByDialogueBoxLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(sortByOkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        sortByDialogueBoxLayout.setVerticalGroup(
            sortByDialogueBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sortByDialogueBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sortByJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sortByComboBoxOption, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sortByComboBoxSortStyle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sortByOkButton)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Task ID", "Task Name", "Complete", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        AddTaskBtn.setText("Add New Task");
        AddTaskBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddTaskBtnMouseClicked(evt);
            }
        });

        SortByBtn.setText("Sort By...");
        SortByBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortByBtnActionPerformed(evt);
            }
        });

        RemoveAllTasksBtn1.setText("Remove All Tasks");
        RemoveAllTasksBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveAllTasksBtn1ActionPerformed(evt);
            }
        });

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "TO DO", "delete selected task", "update selected task", "somehow undo operations ;-;", "Refactor code across classes" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 875, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(AddTaskBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(RemoveAllTasksBtn1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(SortByBtn))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddTaskBtn)
                    .addComponent(SortByBtn)
                    .addComponent(RemoveAllTasksBtn1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SortByBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortByBtnActionPerformed
        // TODO add your handling code here:
        sortByDialogueBox.setVisible(true);
    }//GEN-LAST:event_SortByBtnActionPerformed

    private void AddTaskBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddTaskBtnMouseClicked
        //prefills text field with "Task Name"
        addTaskTextField.setText("Task Name...");
        addTaskTextField.setForeground(Color.GRAY);
        //sets dialogue box to visible
        addTaskDialogueBox.setVisible(true);
        //sets position relative to JFrame (task manager GUI)
        addTaskDialogueBox.setLocationRelativeTo(this);
    }//GEN-LAST:event_AddTaskBtnMouseClicked

    private void dialogAddTaskBtnMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dialogAddTaskBtnMousePressed
        // TODO add your handling code here:
        //creates task and populates task fields with input from dialog fields.
        Task task;
        String taskName = addTaskTextField.getText().trim();
        String taskType = (String) taskTypeComboBox.getSelectedItem();
        if (!taskName.isEmpty()
                && taskName.length() < tc.getMaxNameLength()
                && taskName.length() >= tc.getMinNameLength()) {

            if (taskName.length() > tc.getMaxNameLength()) {
                JOptionPane.showMessageDialog(this, "Task Name is too Long! Maximum 32 Characters");
            } else if (taskName.length() < tc.getMinNameLength()) {
                JOptionPane.showMessageDialog(this, "Task Name is too Short! Minimum 1 Character");
            }
            if ("Home".equals(taskType)) {
                task = new HomeTask();
            } else {
                task = new WorkTask();
            }
            task.setTaskName(taskName);
            //adds task to DB
            dbm.add(task);
            //updates Table in JFrame
            populateJTable();
        } else {
            if (taskName.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Task Name Must Contain a Value!");
            } else if (taskName.length() > tc.getMaxNameLength()) {
                JOptionPane.showMessageDialog(this, "Task Name is too Long! Maximum 32 Characters");
            } else if (taskName.length() < tc.getMinNameLength()) {
                JOptionPane.showMessageDialog(this, "Task Name is too Short! Minimum 1 Character");
            }
        }
        //sets dialogue box to invisible
        addTaskDialogueBox.setVisible(false);
    }//GEN-LAST:event_dialogAddTaskBtnMousePressed

    private void removeAllYesOptionMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeAllYesOptionMousePressed
        // TODO add your handling code here:
        //removes all tasks for DB
        dbm.removeAll();
        //updates table in JFrame
        populateJTable();
        //sets dialogue box to invisible
        removeAllDialogueBox.setVisible(false);
    }//GEN-LAST:event_removeAllYesOptionMousePressed

    private void RemoveAllTasksBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveAllTasksBtn1ActionPerformed
        // TODO add your handling code here:
        //sets dialogue box to visible
        removeAllDialogueBox.setVisible(true);
        //sets location of dialogue relative to JFrame
        removeAllDialogueBox.setLocationRelativeTo(this);
    }//GEN-LAST:event_RemoveAllTasksBtn1ActionPerformed

    private void removeAllNoOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllNoOptionActionPerformed
        // TODO add your handling code here:
        //sets the dialogue box to invisible
        removeAllDialogueBox.setVisible(false);
    }//GEN-LAST:event_removeAllNoOptionActionPerformed

    private void sortByOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortByOkButtonActionPerformed
        // TODO add your handling code here:
        //get sort key from combo box
        String sortBy = (String) sortByComboBoxOption.getSelectedItem();
        String sortStyle = (String) sortByComboBoxSortStyle.getSelectedItem();
//        System.out.println("sort by: " + sortBy);

        //ensure a selection was made.
        if (sortBy != null) {
            //create a new sorter.
            TableRowSorter<TableModel> sorter = new TableRowSorter<>(jTable1.getModel());
            jTable1.setRowSorter(sorter);

            //find the index of the sort key from table.
            int columnIndex = jTable1.getColumnModel().getColumnIndex(sortBy);

            //create a SortKey for the selected column in selected sort style
            RowSorter.SortKey sortKey;
            if (sortStyle.equals("Ascending")) {
                sortKey = new RowSorter.SortKey(columnIndex, SortOrder.ASCENDING);
            } else {
                sortKey = new RowSorter.SortKey(columnIndex, SortOrder.DESCENDING);
            }
            sorter.setSortKeys(java.util.Collections.singletonList(sortKey));

            //apply sort to table
            jTable1.setRowSorter(sorter);
        } else {
            System.out.println("No valid selection made.");
        }

        //hide the dialogue box
        sortByDialogueBox.setVisible(false);
    }//GEN-LAST:event_sortByOkButtonActionPerformed

    private void addTaskTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addTaskTextFieldFocusGained
        // TODO add your handling code here:
        //set text field to blank when focus gained
        if (addTaskTextField.getText().equals("Task Name...")) {
            addTaskTextField.setText("");
        }
        addTaskTextField.setForeground(Color.BLACK);

    }//GEN-LAST:event_addTaskTextFieldFocusGained

    private void addTaskTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addTaskTextFieldFocusLost
        // TODO add your handling code here:
        if (addTaskTextField.getText().isEmpty()) {
            addTaskTextField.setText("Task Name...");
            addTaskTextField.setForeground(Color.GRAY);
        }
    }//GEN-LAST:event_addTaskTextFieldFocusLost

    public void displayTaskManagerGUI() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TaskManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TaskManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TaskManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TaskManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TaskManagerGUI().setVisible(true);
            }
        });
    }

    private void populateJTable() {
        //create connection, statement and resultset
        Connection connection = dbm.openConnection();
        Statement stmt = dbm.openStatement(connection);
        ResultSet rs = dbm.getAllTasks();

        //get table model from JTable1
        DefaultTableModel tableMdl = (DefaultTableModel) jTable1.getModel();
        //delete all current instances in the table model
        //(otherwise duplicate rows are created after every update.)
        tableMdl.setRowCount(0);

        try {
            //continue this loop until no more values in ResultSet
            while (rs.next()) {
                //get values of rows
                String id = String.valueOf(rs.getInt("taskID"));
                String name = rs.getString("TaskName");
                String complete = rs.getString("Complete");
                String type = rs.getString("TaskType");

                //put values in array
                String dbData[] = {id, name, complete, type};
                //add array to table model
                tableMdl.addRow(dbData);
            }
        } catch (SQLException ex) {
            Logger.getLogger(TaskManagerGUI.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            //close resources
            dbm.closeConnection(connection);
            dbm.closeResultSet(rs);
            dbm.closeStatement(stmt);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddTaskBtn;
    private javax.swing.JButton RemoveAllTasksBtn1;
    private javax.swing.JButton SortByBtn;
    private javax.swing.JDialog addTaskDialogueBox;
    private javax.swing.JTextField addTaskTextField;
    private javax.swing.JButton dialogAddTaskBtn;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JDialog removeAllDialogueBox;
    private javax.swing.JLabel removeAllLabel;
    private javax.swing.JButton removeAllNoOption;
    private javax.swing.JButton removeAllYesOption;
    private javax.swing.JComboBox<String> sortByComboBoxOption;
    private javax.swing.JComboBox<String> sortByComboBoxSortStyle;
    private javax.swing.JDialog sortByDialogueBox;
    private javax.swing.JLabel sortByJLabel;
    private javax.swing.JButton sortByOkButton;
    private javax.swing.JComboBox<String> taskTypeComboBox;
    // End of variables declaration//GEN-END:variables
}
