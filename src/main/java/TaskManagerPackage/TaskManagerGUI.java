/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package TaskManagerPackage;

import java.awt.Color;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author maste
 */
public class TaskManagerGUI extends javax.swing.JFrame {

    /**
     * Creates new form TaskManagerGUI
     */
    DBManager dbm = new DBManager();
    TaskCreator tc = new TaskCreator();

    public TaskManagerGUI() {
        initComponents();
        populateJTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addTaskDialogueBox = new javax.swing.JDialog();
        addTaskTextField = new javax.swing.JTextField();
        taskTypeComboBox = new javax.swing.JComboBox<>();
        dialogAddTaskBtn = new javax.swing.JButton();
        removeAllDialogueBox = new javax.swing.JDialog();
        removeAllLabel = new javax.swing.JLabel();
        removeAllNoOption = new javax.swing.JButton();
        removeAllYesOption = new javax.swing.JButton();
        sortByDialogueBox = new javax.swing.JDialog();
        sortByComboBoxOption = new javax.swing.JComboBox<>();
        sortByJLabel = new javax.swing.JLabel();
        sortByOkButton = new javax.swing.JButton();
        sortByComboBoxSortStyle = new javax.swing.JComboBox<>();
        removeSelectedDialogueBox = new javax.swing.JDialog();
        removeSelectedLabel = new javax.swing.JLabel();
        removeSelectedNoOption = new javax.swing.JButton();
        removeSelectedYesOption = new javax.swing.JButton();
        updateSelectedDialogueBox = new javax.swing.JDialog();
        updateTaskNameLabel = new javax.swing.JLabel();
        updateTaskTypeLabel = new javax.swing.JLabel();
        updateTaskNameTextField = new javax.swing.JTextField();
        updateTaskTypeComboBox = new javax.swing.JComboBox<>();
        updateSelectedOkButton = new javax.swing.JButton();
        markAsCompleteDialogueBox = new javax.swing.JDialog();
        markAsCompleteYesOption = new javax.swing.JButton();
        markAsCompleteNoOption = new javax.swing.JButton();
        markAsCompleteCheckBox = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        AddTaskBtn = new javax.swing.JButton();
        SortByBtn = new javax.swing.JButton();
        removeAllTasksBtn = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        updateSelectedButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        markAsCompleteButton = new javax.swing.JButton();

        addTaskDialogueBox.setAutoRequestFocus(false);
        addTaskDialogueBox.setMinimumSize(new java.awt.Dimension(300, 150));

        addTaskTextField.setText("Task Name...");
        addTaskTextField.setToolTipText("Insert Task Name");
        addTaskTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                addTaskTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                addTaskTextFieldFocusLost(evt);
            }
        });

        taskTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Work", "Home" }));

        dialogAddTaskBtn.setText("Add Task");
        dialogAddTaskBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                dialogAddTaskBtnMousePressed(evt);
            }
        });

        javax.swing.GroupLayout addTaskDialogueBoxLayout = new javax.swing.GroupLayout(addTaskDialogueBox.getContentPane());
        addTaskDialogueBox.getContentPane().setLayout(addTaskDialogueBoxLayout);
        addTaskDialogueBoxLayout.setHorizontalGroup(
            addTaskDialogueBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addTaskDialogueBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addTaskDialogueBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addTaskTextField)
                    .addGroup(addTaskDialogueBoxLayout.createSequentialGroup()
                        .addComponent(taskTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 186, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addTaskDialogueBoxLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(dialogAddTaskBtn)))
                .addContainerGap())
        );
        addTaskDialogueBoxLayout.setVerticalGroup(
            addTaskDialogueBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addTaskDialogueBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addTaskTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(taskTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(dialogAddTaskBtn)
                .addContainerGap())
        );

        removeAllDialogueBox.setMinimumSize(new java.awt.Dimension(345, 110));

        removeAllLabel.setText("Are you sure you want to remove all tasks?");

        removeAllNoOption.setText("No");
        removeAllNoOption.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeAllNoOptionMouseClicked(evt);
            }
        });

        removeAllYesOption.setText("Yes");
        removeAllYesOption.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeAllYesOptionMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                removeAllYesOptionMousePressed(evt);
            }
        });

        javax.swing.GroupLayout removeAllDialogueBoxLayout = new javax.swing.GroupLayout(removeAllDialogueBox.getContentPane());
        removeAllDialogueBox.getContentPane().setLayout(removeAllDialogueBoxLayout);
        removeAllDialogueBoxLayout.setHorizontalGroup(
            removeAllDialogueBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, removeAllDialogueBoxLayout.createSequentialGroup()
                .addContainerGap(89, Short.MAX_VALUE)
                .addComponent(removeAllYesOption, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(removeAllNoOption, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(88, 88, 88))
            .addGroup(removeAllDialogueBoxLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(removeAllLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        removeAllDialogueBoxLayout.setVerticalGroup(
            removeAllDialogueBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(removeAllDialogueBoxLayout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addComponent(removeAllLabel)
                .addGap(18, 18, 18)
                .addGroup(removeAllDialogueBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeAllYesOption)
                    .addComponent(removeAllNoOption))
                .addContainerGap())
        );

        sortByDialogueBox.setMinimumSize(new java.awt.Dimension(250, 200));

        sortByComboBoxOption.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Task ID", "Task Name", "Complete", "Type" }));

        sortByJLabel.setText("Sort By:");

        sortByOkButton.setText("OK");
        sortByOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortByOkButtonActionPerformed(evt);
            }
        });

        sortByComboBoxSortStyle.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ascending", "Descending" }));

        javax.swing.GroupLayout sortByDialogueBoxLayout = new javax.swing.GroupLayout(sortByDialogueBox.getContentPane());
        sortByDialogueBox.getContentPane().setLayout(sortByDialogueBoxLayout);
        sortByDialogueBoxLayout.setHorizontalGroup(
            sortByDialogueBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sortByDialogueBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sortByDialogueBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sortByComboBoxSortStyle, 0, 161, Short.MAX_VALUE)
                    .addComponent(sortByJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sortByComboBoxOption, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(85, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sortByDialogueBoxLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(sortByOkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        sortByDialogueBoxLayout.setVerticalGroup(
            sortByDialogueBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sortByDialogueBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sortByJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sortByComboBoxOption, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sortByComboBoxSortStyle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sortByOkButton)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        removeSelectedDialogueBox.setMinimumSize(new java.awt.Dimension(345, 110));

        removeSelectedLabel.setText("Are you sure you want to remove selected tasks?");

        removeSelectedNoOption.setText("No");
        removeSelectedNoOption.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeSelectedNoOptionMouseClicked(evt);
            }
        });

        removeSelectedYesOption.setText("Yes");
        removeSelectedYesOption.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeSelectedYesOptionMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout removeSelectedDialogueBoxLayout = new javax.swing.GroupLayout(removeSelectedDialogueBox.getContentPane());
        removeSelectedDialogueBox.getContentPane().setLayout(removeSelectedDialogueBoxLayout);
        removeSelectedDialogueBoxLayout.setHorizontalGroup(
            removeSelectedDialogueBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, removeSelectedDialogueBoxLayout.createSequentialGroup()
                .addContainerGap(89, Short.MAX_VALUE)
                .addComponent(removeSelectedYesOption, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(removeSelectedNoOption, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(88, 88, 88))
            .addGroup(removeSelectedDialogueBoxLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(removeSelectedLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        removeSelectedDialogueBoxLayout.setVerticalGroup(
            removeSelectedDialogueBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(removeSelectedDialogueBoxLayout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addComponent(removeSelectedLabel)
                .addGap(18, 18, 18)
                .addGroup(removeSelectedDialogueBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeSelectedYesOption)
                    .addComponent(removeSelectedNoOption))
                .addContainerGap())
        );

        updateSelectedDialogueBox.setMinimumSize(new java.awt.Dimension(250, 200));

        updateTaskNameLabel.setText("Name");

        updateTaskTypeLabel.setText("Type");

        updateTaskNameTextField.setText("Task Name...");

        updateTaskTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Home", "Work" }));

        updateSelectedOkButton.setText("Done");
        updateSelectedOkButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateSelectedOkButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout updateSelectedDialogueBoxLayout = new javax.swing.GroupLayout(updateSelectedDialogueBox.getContentPane());
        updateSelectedDialogueBox.getContentPane().setLayout(updateSelectedDialogueBoxLayout);
        updateSelectedDialogueBoxLayout.setHorizontalGroup(
            updateSelectedDialogueBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updateSelectedDialogueBoxLayout.createSequentialGroup()
                .addGroup(updateSelectedDialogueBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(updateSelectedDialogueBoxLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(updateSelectedDialogueBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(updateSelectedDialogueBoxLayout.createSequentialGroup()
                                .addComponent(updateTaskNameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(updateTaskNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(updateSelectedDialogueBoxLayout.createSequentialGroup()
                                .addComponent(updateTaskTypeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(updateTaskTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(updateSelectedDialogueBoxLayout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addComponent(updateSelectedOkButton)))
                .addContainerGap(179, Short.MAX_VALUE))
        );
        updateSelectedDialogueBoxLayout.setVerticalGroup(
            updateSelectedDialogueBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updateSelectedDialogueBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(updateSelectedDialogueBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateTaskNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateTaskNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(updateSelectedDialogueBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateTaskTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateTaskTypeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(updateSelectedOkButton)
                .addContainerGap(200, Short.MAX_VALUE))
        );

        markAsCompleteDialogueBox.setAlwaysOnTop(true);
        markAsCompleteDialogueBox.setMinimumSize(new java.awt.Dimension(200, 150));

        markAsCompleteYesOption.setText("Done");
        markAsCompleteYesOption.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                markAsCompleteYesOptionMouseClicked(evt);
            }
        });

        markAsCompleteNoOption.setText("Cancel");
        markAsCompleteNoOption.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                markAsCompleteNoOptionMouseClicked(evt);
            }
        });

        markAsCompleteCheckBox.setText("Mark as Complete?");
        markAsCompleteCheckBox.setToolTipText("tick to mark as complete, untick to mark as incomplete");

        javax.swing.GroupLayout markAsCompleteDialogueBoxLayout = new javax.swing.GroupLayout(markAsCompleteDialogueBox.getContentPane());
        markAsCompleteDialogueBox.getContentPane().setLayout(markAsCompleteDialogueBoxLayout);
        markAsCompleteDialogueBoxLayout.setHorizontalGroup(
            markAsCompleteDialogueBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, markAsCompleteDialogueBoxLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(markAsCompleteDialogueBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(markAsCompleteCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(markAsCompleteDialogueBoxLayout.createSequentialGroup()
                        .addComponent(markAsCompleteYesOption, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(markAsCompleteNoOption, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        markAsCompleteDialogueBoxLayout.setVerticalGroup(
            markAsCompleteDialogueBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(markAsCompleteDialogueBoxLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(markAsCompleteCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(markAsCompleteDialogueBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(markAsCompleteYesOption)
                    .addComponent(markAsCompleteNoOption))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Task ID", "Task Name", "Complete", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        AddTaskBtn.setText("Add New Task");
        AddTaskBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddTaskBtnMouseClicked(evt);
            }
        });

        SortByBtn.setText("Sort Tasks");
        SortByBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortByBtnActionPerformed(evt);
            }
        });

        removeAllTasksBtn.setText("Remove All Tasks");
        removeAllTasksBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllTasksBtnActionPerformed(evt);
            }
        });

        deleteButton.setText("Remove Selected");
        deleteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteButtonMouseClicked(evt);
            }
        });

        updateSelectedButton.setText("Update Selected");
        updateSelectedButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                updateSelectedButtonMousePressed(evt);
            }
        });

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "TO DO", "update selected task", "somehow undo operations ;-;", "Refactor code across classes" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList1);

        markAsCompleteButton.setText("Mark as Complete");
        markAsCompleteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                markAsCompleteButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(removeAllTasksBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                    .addComponent(SortByBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                                .addComponent(updateSelectedButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(markAsCompleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AddTaskBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(AddTaskBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeAllTasksBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SortByBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateSelectedButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(markAsCompleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //OPENS SORT BY DIALOGUE BOX
    private void SortByBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortByBtnActionPerformed
        sortByDialogueBox.setLocationRelativeTo(this);
        sortByDialogueBox.setVisible(true);
    }//GEN-LAST:event_SortByBtnActionPerformed

    //OPENS ADD TASK DIALOGUE BOX
    private void AddTaskBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddTaskBtnMouseClicked
        //prefills text field with "Task Name"
        addTaskTextField.setText("Task Name...");
        addTaskTextField.setForeground(Color.GRAY);
        //sets dialogue box to visible
        addTaskDialogueBox.setVisible(true);
        //sets position relative to JFrame (task manager GUI)
        addTaskDialogueBox.setLocationRelativeTo(this);
    }//GEN-LAST:event_AddTaskBtnMouseClicked

    // ADDS TASK TO DATABASE WITH DATA ENTERED BY USER
    private void dialogAddTaskBtnMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dialogAddTaskBtnMousePressed
        //creates task and populates task fields with input from dialog fields.
        Task task;
        String taskName = addTaskTextField.getText().trim();
        String taskType = (String) taskTypeComboBox.getSelectedItem();
        if (!taskName.isEmpty()
                && taskName.length() < tc.getMaxNameLength()
                && taskName.length() >= tc.getMinNameLength()) {

            if (taskName.length() > tc.getMaxNameLength()) {
                JOptionPane.showMessageDialog(this, "Task Name is too Long! Maximum 32 Characters");
            } else if (taskName.length() < tc.getMinNameLength()) {
                JOptionPane.showMessageDialog(this, "Task Name is too Short! Minimum 1 Character");
            }
            if ("Home".equals(taskType)) {
                task = new HomeTask();
            } else {
                task = new WorkTask();
            }
            task.setTaskName(taskName);
            //adds task to DB
            dbm.add(task);
            //updates Table in JFrame
            populateJTable();
        } else {
            if (taskName.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Task Name Must Contain a Value!");
            } else if (taskName.length() > tc.getMaxNameLength()) {
                JOptionPane.showMessageDialog(this, "Task Name is too Long! Maximum 32 Characters");
            } else if (taskName.length() < tc.getMinNameLength()) {
                JOptionPane.showMessageDialog(this, "Task Name is too Short! Minimum 1 Character");
            }
        }
        //sets dialogue box to invisible
        addTaskDialogueBox.setVisible(false);
    }//GEN-LAST:event_dialogAddTaskBtnMousePressed

    // REMOVES ALL TASKS FROM DATABASE
    private void removeAllYesOptionMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeAllYesOptionMousePressed
        //removes all tasks for DB
        dbm.removeAll();
        //updates table in JFrame
        populateJTable();
        //sets dialogue box to invisible
        removeAllDialogueBox.setVisible(false);
    }//GEN-LAST:event_removeAllYesOptionMousePressed

    // OPENS REMOVE ALL DIALOGUE BOX
    private void removeAllTasksBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllTasksBtnActionPerformed
        //sets dialogue box to visible
        removeAllDialogueBox.setVisible(true);
        //sets location of dialogue relative to JFrame
        removeAllDialogueBox.setLocationRelativeTo(this);
    }//GEN-LAST:event_removeAllTasksBtnActionPerformed

    // SORTS TASKS BY COLUMN AND STYLE SELECTED BY USER
    private void sortByOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortByOkButtonActionPerformed
        //get sort key from combo box
        String sortBy = (String) sortByComboBoxOption.getSelectedItem(); // what column to sort by.
        String sortStyle = (String) sortByComboBoxSortStyle.getSelectedItem(); // ascending / descending
//        System.out.println("sort by: " + sortBy);

        //ensure a selection was made.
        if (sortBy != null) {
            //create a new sorter.
            TableRowSorter<TableModel> sorter = new TableRowSorter<>(jTable1.getModel());
            jTable1.setRowSorter(sorter);

            //find the index of the sort key from table.
            int columnIndex = jTable1.getColumnModel().getColumnIndex(sortBy); //get index of column to sort by

            //create a SortKey for the selected column in selected sort style
            RowSorter.SortKey sortKey;
            if (sortStyle.equals("Ascending")) {
                sortKey = new RowSorter.SortKey(columnIndex, SortOrder.ASCENDING);
            } else {
                sortKey = new RowSorter.SortKey(columnIndex, SortOrder.DESCENDING);
            }
            sorter.setSortKeys(java.util.Collections.singletonList(sortKey));

            //apply sort to table
            jTable1.setRowSorter(sorter);
        } else {
            System.out.println("No valid selection made.");
        }

        //hide the dialogue box
        sortByDialogueBox.setVisible(false);
    }//GEN-LAST:event_sortByOkButtonActionPerformed

    // LOOK AND FEEL CODE FOR ADD TASK DIALOGUE BOX
    private void addTaskTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addTaskTextFieldFocusGained
        //set text field to blank when focus gained
        if (addTaskTextField.getText().equals("Task Name...")) {
            addTaskTextField.setText("");
        }
        //set color of text to black
        addTaskTextField.setForeground(Color.BLACK);

    }//GEN-LAST:event_addTaskTextFieldFocusGained

    // LOOK AND FEEL CODE FOR ADD TASK DIALOGUE BOX
    private void addTaskTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addTaskTextFieldFocusLost
        // if the text field is empty, set the text to 'task name...' and color to grey
        if (addTaskTextField.getText().isEmpty()) {
            addTaskTextField.setText("Task Name...");
            addTaskTextField.setForeground(Color.GRAY);
        }
    }//GEN-LAST:event_addTaskTextFieldFocusLost

    // OPENS REMOVE SELECTED DIALOGUE BOX
    private void deleteButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseClicked
        removeSelectedDialogueBox.setLocationRelativeTo(this);
        int[] rows = jTable1.getSelectedRows();
        if (rows.length <= 0) {
            JOptionPane.showMessageDialog(this, "Error. Please select rows.");
        } else {
            removeSelectedDialogueBox.setVisible(true);
        }
    }//GEN-LAST:event_deleteButtonMouseClicked

    // REMOVES ALL TASKS FROM DATABASE
    private void removeAllYesOptionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeAllYesOptionMouseClicked
        dbm.removeAll();
    }//GEN-LAST:event_removeAllYesOptionMouseClicked

    // CLOSES REMOVE ALL DIALOGUE BOX
    private void removeAllNoOptionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeAllNoOptionMouseClicked
        //set dialogue box to invisible
        removeAllDialogueBox.setVisible(false);

    }//GEN-LAST:event_removeAllNoOptionMouseClicked

    // CLOSES REMOVE SELECTED DIALOGUE BOX
    private void removeSelectedNoOptionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeSelectedNoOptionMouseClicked
        //set dialogue box to invisible
        removeSelectedDialogueBox.setVisible(false);
    }//GEN-LAST:event_removeSelectedNoOptionMouseClicked

    // REMOVES DATA FROM DATABASE USING DATA FROM SELECTED ROWS.
    private void removeSelectedYesOptionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeSelectedYesOptionMouseClicked
        //get indexs of selected rows.
        int[] rows = jTable1.getSelectedRows();
        //iterate through each index
        for (int a : rows) {
            //get task id from row
            int taskID = Integer.parseInt(jTable1.getValueAt(a, 0).toString());
            //remove task using primary key of task id.
            dbm.remove(taskID);
        }
        //update table
        populateJTable();
        //set dialogue box to invisible

        removeSelectedDialogueBox.setVisible(false);
    }//GEN-LAST:event_removeSelectedYesOptionMouseClicked

    // DISPLAYS UPDATE SELECTED DIALOGUE BOX
    private void updateSelectedButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateSelectedButtonMousePressed
        //prefills text field with data from selected row.
        int[] rows = jTable1.getSelectedRows();
        if (rows.length == 1) {
            String taskName = jTable1.getValueAt(rows[0], 1).toString();
            updateTaskNameTextField.setText(taskName);

            updateSelectedDialogueBox.setLocationRelativeTo(this);
            updateSelectedDialogueBox.setVisible(true);
        } else if (rows.length < 1) {
            JOptionPane.showMessageDialog(this, "Error. Please select a row.");
        } else {
            JOptionPane.showMessageDialog(this, "Error. Please select only ONE row.");

        }
    }//GEN-LAST:event_updateSelectedButtonMousePressed

    // UPDATES 'TASKTYPE' AND 'TASKNAME' IN SELECTED ROW WITH NEW VALUES.
    private void updateSelectedOkButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateSelectedOkButtonMouseClicked
        //get row data
        int row = jTable1.getSelectedRow();
        int taskID = Integer.parseInt(jTable1.getValueAt(row, 0).toString());

        //get data from dialogue box
        String newTaskName = (String) updateTaskNameTextField.getText();
        String newTaskType = (String) updateTaskTypeComboBox.getSelectedItem();

        //update database with new values
        dbm.update(taskID, "TaskType", newTaskType);
        dbm.update(taskID, "TaskName", newTaskName);

        //update JTable.
        populateJTable();

        //close dialogue box.
        updateSelectedDialogueBox.setVisible(false);
    }//GEN-LAST:event_updateSelectedOkButtonMouseClicked

    // DISPLAY MARK AS COMPLETE DIALOGUE BOX
    private void markAsCompleteButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_markAsCompleteButtonMouseClicked
        int[] rows = jTable1.getSelectedRows();
        if (rows.length <= 0) {
            JOptionPane.showMessageDialog(this, "Error. Please select rows.");
        } else {
            markAsCompleteDialogueBox.setLocationRelativeTo(this);
            markAsCompleteDialogueBox.setVisible(true);
        }
    }//GEN-LAST:event_markAsCompleteButtonMouseClicked

    // MARKS SELECTED ROWS AS COMPLETE/INCOMPLETE
    private void markAsCompleteYesOptionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_markAsCompleteYesOptionMouseClicked
        //get indexs of selected rows.
        int[] rows = jTable1.getSelectedRows();
        //iterate through each index
        for (int a : rows) {
            //get task id from row
            int taskID = Integer.parseInt(jTable1.getValueAt(a, 0).toString());
            //update task using primary key of task id.
            if (markAsCompleteCheckBox.isSelected()) { // if checkbox enabled, mark as complete, else mark as incomplete.
                dbm.update(taskID, "Complete", "y");
            } else {
                dbm.update(taskID, "Complete", "n");
            }
        }
        //update table
        populateJTable();
        //set dialogue box to invisible
        markAsCompleteDialogueBox.setVisible(false);
    }//GEN-LAST:event_markAsCompleteYesOptionMouseClicked

    // CLOSES MARK AS COMPLETE DIALOGUE BOX
    private void markAsCompleteNoOptionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_markAsCompleteNoOptionMouseClicked
        // TODO add your handling code here:
        markAsCompleteDialogueBox.setVisible(false);
    }//GEN-LAST:event_markAsCompleteNoOptionMouseClicked

    public void displayTaskManagerGUI() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TaskManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TaskManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TaskManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TaskManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TaskManagerGUI().setVisible(true);
            }
        });
    }

    // UPDATES JTABLE FOR GUI
    private void populateJTable() {
        //create connection, statement and resultset
        Connection connection = dbm.openConnection();
        Statement stmt = dbm.openStatement(connection);
        ResultSet rs = dbm.getAllTasks();

        //get table model from JTable1
        DefaultTableModel tableMdl = (DefaultTableModel) jTable1.getModel();
        //delete all current instances in the table model
        //(otherwise duplicate rows are created after every update.)
        tableMdl.setRowCount(0);

        try {
            //continue this loop until no more values in ResultSet
            while (rs.next()) {
                //get values of rows
                String id = String.valueOf(rs.getInt("taskID"));
                String name = rs.getString("TaskName");
                String complete = rs.getString("Complete");
                String type = rs.getString("TaskType");

                //put values in array
                String dbData[] = {id, name, complete, type};
                //add array to table model
                tableMdl.addRow(dbData);
            }
        } catch (SQLException ex) {
            Logger.getLogger(TaskManagerGUI.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            //close resources
            dbm.closeConnection(connection);
            dbm.closeResultSet(rs);
            dbm.closeStatement(stmt);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddTaskBtn;
    private javax.swing.JButton SortByBtn;
    private javax.swing.JDialog addTaskDialogueBox;
    private javax.swing.JTextField addTaskTextField;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton dialogAddTaskBtn;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton markAsCompleteButton;
    private javax.swing.JCheckBox markAsCompleteCheckBox;
    private javax.swing.JDialog markAsCompleteDialogueBox;
    private javax.swing.JButton markAsCompleteNoOption;
    private javax.swing.JButton markAsCompleteYesOption;
    private javax.swing.JDialog removeAllDialogueBox;
    private javax.swing.JLabel removeAllLabel;
    private javax.swing.JButton removeAllNoOption;
    private javax.swing.JButton removeAllTasksBtn;
    private javax.swing.JButton removeAllYesOption;
    private javax.swing.JDialog removeSelectedDialogueBox;
    private javax.swing.JLabel removeSelectedLabel;
    private javax.swing.JButton removeSelectedNoOption;
    private javax.swing.JButton removeSelectedYesOption;
    private javax.swing.JComboBox<String> sortByComboBoxOption;
    private javax.swing.JComboBox<String> sortByComboBoxSortStyle;
    private javax.swing.JDialog sortByDialogueBox;
    private javax.swing.JLabel sortByJLabel;
    private javax.swing.JButton sortByOkButton;
    private javax.swing.JComboBox<String> taskTypeComboBox;
    private javax.swing.JButton updateSelectedButton;
    private javax.swing.JDialog updateSelectedDialogueBox;
    private javax.swing.JButton updateSelectedOkButton;
    private javax.swing.JLabel updateTaskNameLabel;
    private javax.swing.JTextField updateTaskNameTextField;
    private javax.swing.JComboBox<String> updateTaskTypeComboBox;
    private javax.swing.JLabel updateTaskTypeLabel;
    // End of variables declaration//GEN-END:variables
}
